import { LightningElement, track } from "lwc";
import getOpportunityData from "@salesforce/apex/ExportDataController.getOpportunityData";
import getTopandTargetDataToExport from "@salesforce/apex/ExportFeedDataController.getTopandTargetDataToExport";


import {ShowToastEvent} from "lightning/platformShowToastEvent"

export default class XlsxDemo extends LightningElement {
    @track xlsHeader = []; // store all the headers of the the tables
    @track workSheetNameList = []; // store all the sheets name of the the tables
    @track xlsData = []; // store all tables data
    @track filename ="";
    @track SSdata = []; 
    @track EPCdata = []; 
    @track SAdata = [];

    
    errorFlag = false;



    connectedCallback() {
        let date = new Date()
        this.filename = "Pipeline Output for SS EPC and Strategic Accounts"+date.toLocaleString()+".xlsx"; // Name of the file

        getOpportunityData()
        .then(result => {
            if(result.length !=0){
                for(let v=0;v<result.length;v++){
                    let obj = {};
                    console.log(result[v]);
                    obj['Customer Name'] = result[v].Account.Name;
                    obj['Deal/Project Name'] = result[v]['Name'];
                    obj['CreatedDate'] = result[v]['CreatedDate'];
                    if(result[v].RecordType.Name == 'Strategic Accounts'){
                        obj['Deal Type'] = result[v]['Deal_Type__c'];
                    }
                    obj['City'] = result[v]['Service_Location_City__c'];
                    obj['State'] = result[v]['Service_Location_State__c'];
                    obj['Region'] = result[v]['Regions__c'];
                    obj['Deal Opportunity $'] = result[v]['Amount'];
                    obj['Stage'] = result[v]['StageName'];
                    obj['Weighted $'] = result[v]['Weighted__c'];
                    obj['Confidence %'] = result[v]['Probability'];
                    obj['Days in Pipeline'] = result[v]['Days_in_Pipeline__c'];
                    obj['Days in Stage'] = result[v]['Days_in_Stage__c'];
                    obj['Salesperson Name'] = result[v].Owner.Name;
    
                    console.log('######################')
                    console.log(obj);
                        
                    if(result[v].RecordType.Name =='Service and Solutions'){
                        this.SSdata.push(obj);
                    }
                    else if(result[v].RecordType.Name =='EPC'){
                        this.EPCdata.push(obj);
                    }
                    else if(result[v].RecordType.Name =='Strategic Accounts'){
                        this.SAdata.push(obj);
                    }
                    
                }
    

            }    
            
            if(this.SSdata.length == 0){

                let obj = {'Customer Name':'','Deal/Project Name':'', 'CreatedDate':'', 'City':'', 'State':'', 'Region': '', 'Deal Opportunity $':'','Stage':'','Weighted $':'','Confidence %':'', 'Days in Pipeline':'', 'Days in Stage' : '','Salesperson Name': ''};
                this.SSdata.push(obj);
            }

            if(this.EPCdata.length == 0){
                let obj = {'Customer Name':'','Deal/Project Name':'','CreatedDate':'', 'City':'', 'State':'', 'Region': '', 'Deal Opportunity $':'','Stage':'','Weighted $':'','Confidence %':'', 'Days in Pipeline':'', 'Days in Stage' : '','Salesperson Name': ''};
                this.EPCdata.push(obj);

            }

            if(this.SAdata.length == 0){
                let obj = {'Customer Name':'','Deal/Project Name':'','CreatedDate':'', 'Deal Type':'', 'City':'', 'State':'', 'Region': '', 'Deal Opportunity $':'','Stage':'','Weighted $':'','Confidence %':'', 'Days in Pipeline':'', 'Days in Stage' : '','Salesperson Name': ''};
                this.SAdata.push(obj);

            }
            

            this.xlsFormatter(this.SSdata, "S&S Data");
            this.xlsFormatter(this.EPCdata, "EPC");
            this.xlsFormatter(this.SAdata, "Strategic Accounts");
            
        })
        .catch(error => {

            console.log('Error');

            console.error(error);
            this.errorFlag = true;
        });
        getTopandTargetDataToExport()
            .then(result => {
                console.log(result);
                //this.SAHeader = Object.keys(result[0]);
                //this.SAdata = [...this.SAdata, ...result];
                let new_result = [];
                if(result.length !=0){
                    for(let v=0;v<result.length;v++){
                        console.log('**********************************')
                        console.log(result[v]);
                        let obj = {'Customer Name':'','Customer Type':'','Customer Segment':'', 'City':'', 'State':'', 'Region': '', 'Chatter':'','Last ChatterDate':'','Chatter Entered By':'', 'Role of Chatter Entered By':''};
                        obj['Customer Name'] = result[v]['CustomerName'];
                        obj['Customer Type'] = result[v]['CustomerType'];
                        obj['Customer Segment'] = result[v]['CustomerSegment'];
                        obj['City'] = result[v]['City'];
                        obj['State'] = result[v]['State'];
                        obj['Region'] = result[v]['Region'];
                        if(result[v]['Chatter'] != undefined){
                            obj['Chatter'] = result[v]['Chatter'].replace(/<\/?[^>]+(>|$)/g, "");
                        }
                        obj['Last ChatterDate'] = result[v]['LastChatterDate'];
                        obj['Chatter Entered By'] = result[v]['ChatterEnteredBy'];
                        obj['Role of Chatter Entered By'] = result[v]['RoleofChatterEnteredBy'];
        
                        new_result.push(obj);
                        console.log(Object.keys(obj));
        
                        }

                }
                if(new_result.length == 0){
                    let obj = {'Customer Name':'','Customer Type':'','Customer Segment':'', 'City':'', 'State':'', 'Region': '', 'Chatter':'','Last ChatterDate':'','Chatter Entered By':'', 'Role of Chatter Entered By':''};
                    new_result.push(obj);    
                }
                this.xlsFormatter(new_result, "Top&Target");
            })
            .catch(error => {
                console.error(error);
                this.errorFlag = true;
            });
    }

    // formating the data to send as input to  xlsxMain component
    xlsFormatter(data, sheetName) {
    let Header = Object.keys(data[0]);
    this.xlsHeader.push(Header);
    this.workSheetNameList.push(sheetName);
    this.xlsData.push(data);
    }

    showToastMessage(variant, message, title) {

    this.dispatchEvent(
        new ShowToastEvent({
        title: title,
        message: message,
        variant: variant
        })
        );
    }

    // calling the download function from xlsxMain.js 
    download() {

        if(!this.errorFlag){
            this.template.querySelector("c-xlsx-main").download();
        }
        else{
            //alert('in error');
            this.showToastMessage('error', 'Some Error Occured ! Contact your admin.', 'Error!');
        }
        
    }
}